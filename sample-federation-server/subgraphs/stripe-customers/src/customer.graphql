# directive @tag(name: String!) repeatable on FIELD_DEFINITION
# extend schema @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])
# @contact isn't being printed to the generated-schema.graphql file
# See https://github.com/apollographql/federation/issues/1847
# directive @contact(
#   "Contact title of the subgraph owner"
#   name: String!
#   "URL where the subgraph's owner can be reached"
#   url: String
#   "Other relevant notes can be included here; supports markdown links"
#   description: String
# ) on SCHEMA

# schema {
#   query: Query
#   mutation: Mutation
# }

type Query {
  getCustomerPaymentMethods(customerID: String): CustomerPaymentMethodsResponse
  getCustomerPaymentHistory(customerID: String): CustomerPaymentHistoryResponse
  searchCustomerByEmail(email: String!): SearchByEmailResponse
}

type SearchByEmailResponse {
  data: StripeCustomer
}

type StripeCustomer {
  id: ID!
  address: StripeCustomerAddress
  balance: Int
  created: Int
  currency: String
  default_currency: String
  default_source: String
  delinquent: Boolean
  description: String
  discount: String
  email: String

  name: String
  phone: String
  default_payment_method: String
}

type StripeCustomerAddress {
  "Adress of Record - Street Line 1"
  street1: String
  "Adress of Record - Street Line 2"
  street2: String
  "Adress of Record - State"
  state: String
  "Adress of Record - City"
  city: String
  "Adress of Record - Zip Code"
  zipCode: String
}
type Mutation {
  createCustomer(createInput: CreateInput): CreateResponse
  setDefaultPaymentMethod(setDefaultInput: SetDefaultInput): SetDefaultResponse
  updateCustomer(input: UpdateCustomer): UpdateCustomerResponse
}

input UpdateCustomer {
  invoice_settings: InvoiceSettings
}
input InvoiceSettings {
  default_payment_method: String
}
type UpdateCustomerResponse {
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}
input CreateInput {
  customer: Customer
}

input SetDefaultInput {
  customerId: String
  id: String
}
type SetDefaultResponse {
  success: Boolean
}
input Customer {
  "Full name of Customer"
  name: String

  "email of customer"
  email: String

  "Phone number of Record"
  phone: String
  address: StripeCustomerAddressInput
}
input MetaDataInput {
  "The Client Unique Customer ID"
  customerID: String
  policyID: String
  amount: String
}

input StripeCustomerAddressInput {
  "Adress of Record - Street Line 1"
  street1: String
  "Adress of Record - Street Line 2"
  street2: String
  "Adress of Record - State"
  state: String
  "Adress of Record - City"
  city: String
  "Adress of Record - Zip Code"
  zipCode: String
}

type CreateResponse @key(fields: "id") {
  id: ID!
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The Stripe Customer ID"
  customerID: String
}

type UpdateDefaultResponse {
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

type CustomerPaymentMethodsResponse {
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The Stripe Customer ID"
  paymentMethods: [PaymentMethod]
  last_payment_method: String
}

type CustomerPaymentHistoryResponse {
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The Stripe Customer ID"
  paymentHistory: [Charge]
}

type PaymentMethod {
  id: ID!
}

type Charge {
  amount: Int
  created: Int
  description: String
  confirmationNumber: String
  last4: String
  brand: String
}
